package com.web.ddentist.hospital.media.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.annotation.ApplicationScope;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.web.ddentist.hospital.media.service.MediaService;
import com.web.ddentist.vo.PatientVO;

import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;

@Slf4j
@RequestMapping("/hospital/media")
@Controller
public class MediaController {

	@Autowired
	MediaService mediaService;

	@GetMapping("")
	public String cal() {
		return "hospital/media";
	}

	@ResponseBody
	@PostMapping("/ptInfo")
	public PatientVO ptInfo(@RequestBody Map<String, String> ptMap) {
		log.info("ptInfo");
		log.info("ptVO : " + ptMap);

		PatientVO ptInfo = this.mediaService.checkUpList(ptMap);
		log.info("ptInfoasdfasd : " + ptInfo);

		return ptInfo;
	}

//	 요청파라미터 : uploadFile이라는 이름의 파일객체
//	 요청방식:post
	@ResponseBody
	@PostMapping("/uploadFile")
	public String uploadFile(@RequestParam MultipartFile[] image) {
		
		System.out.println(image);
		log.info("image : {}", Arrays.toString(image));
		log.info("file count : {}", image.length);
		return "SUCCESS";
		
		/*
		log.info("uploadFileuploadFileuploadFileuploadFile" + request);
		log.info("request" + request);
		List<MultipartFile> uploadFile = request.getFiles("file");
		
		// 파일이 저장되는 경로
		String uploadFolder = "c:\\upload";

		// make folder 시작-------------------------------------------
		File uploadPath = new File(uploadFolder, getFolder());
		log.info("Upload Path : " + uploadPath);

		// 만약 연/월/일 해당 폴더가 없다면 생성
		if (uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}
		// make folder 끝-------------------------------------------------------------

		for (MultipartFile multipartfile : uploadFile) {
			String uploadFileName = multipartfile.getOriginalFilename();

			log.info("-----------------");
			log.info("이미지 명 : " + multipartfile.getOriginalFilename());
			log.info("파일 크기 : " + multipartfile.getSize());
			log.info("컨텐츠(MIME)타입 : " + multipartfile.getContentType());

			// ---------파일명 중복 방지 시작 -------------
			// java.util.UUID => 랜덤값을 생성
			UUID uuid = UUID.randomUUID();
			// ERASDFERASDFA_개똥이.jpg
			uploadFileName = uuid.toString() + "_" + uploadFileName;
			// ---------파일명 중복 방지 끝 -------------

			File saveFile = new File(uploadPath, multipartfile.getOriginalFilename());

			try {
				multipartfile.transferTo(saveFile);

				// 이미지인지 체킹
				try {
					// MIME 타입을 가져옴. images/jpeg
					String contentType = Files.probeContentType(saveFile.toPath());
					log.info("contentType : " + contentType);
					// MIME 타입 정보가 images로 시작하는지 여부
					if (contentType.startsWith("image")) {
						// 파일이름앞에 s_를 붙인다
						FileOutputStream thumbanil = new FileOutputStream(new File(uploadPath, "s_" + uploadFileName));
						// 썸네일 생성 , 100,100으로 사이즈 조절
						Thumbnailator.createThumbnail(multipartfile.getInputStream(), thumbanil, 100, 100);
						thumbanil.close();
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			} catch (IllegalStateException e) {
				log.error(e.getMessage());
			} catch (IOException e) {
				log.error(e.getMessage());
			}
		}
		*/
	}




	//연/월/일 폴더 생성
	public static String getFolder() {
	  //2023-01-27 형식(format)지정
	  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	  
	  //날짜 객체 생성(java.util 패키지)
	  Date date = new Date();
	  //2023-01-27
	  String str = sdf.format(date);
	  //단순 날짜 문자를 File객체의 폴더 타입으로 바꾸기
	  //c:\\upload\\2023\\01\\27
	  return str.replace("-", File.separator);
	}
	
	public static boolean checkImageType(File file) {
		/*
		.jpeg / .jpg(JPEG 이미지)의 MIME 타입 : image/jpeg
		*/
		//MIME 타입을 통해 이미지 여부 확인
		try {
			//file.toPath() : 파일 객체를 path객체로 변환
			String contentType = Files.probeContentType(file.toPath());
			log.info("contentType : "  + contentType);
			// MIME 타입 정보가 image로 시작하는지 엽를 return
			return contentType.startsWith("image");
		} catch (IOException e) {
			log.info(e.getMessage());
		}
		//이 파일이 이미지가 아닐 경우
		return false;
	}
	
}
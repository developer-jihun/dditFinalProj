<%@ page language="java" contentType="text/html; charset=UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<style>
.card-header{
	background-color: #404b57 !important;
}
.ptRow{
	cursor: pointer;
}
</style>
<div class="content-wrapper" style="background-color: #657D96;">
	<!-- main 검색창을 포함한 navbar 시작-->
	<nav class="navbar navbar-expand navbar-white navbar-light" style="background-color: #404b57;">
		<div class="input-group" style="width: 400px;">
			<input type="text" class="form-control" id="ptSearch" placeholder="환자 검색">
			<div class="input-group-append">
				<button type="button" id="ptSearchBtn" class="btn btn-outline-secondary" onclick="searchPt();">검색</button>
			</div>
		</div>
		<img src="/resources/images/layout/memo_icon.png" alt="메모" id="memo" class="brand-image elevation-1" style="margin-left: 15px;">
	</nav>
	
	<section class="content" style="margin-top: 1%;">
		<div class="row" style="height: 760px">
			<div class="col-md-3">
				<div class="card card-info" style="height: 100%;">
					<div class="card-header">
						<div class="card-title">
							<h4 class="m-0">환자 목록</h4>
						</div>
					</div>
					<div class="card-body overflow-auto p-0">
						<table class="table table-hover text-center">
							<thead class="sticky-top" style="background-color: whitesmoke;">
								<tr>
									<th>차트번호</th>
									<th>이름</th>
								</tr>
							</thead>
							<tbody id="patientListBody">
								<tr>
									<td colspan="2">환자를 검색해주세요.</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="col-md-9">
				<div class="card card-info" style="height: 100%;">
					<div class="navbar card-header">
						<div class="card-title">
							<h4 class="m-0">진료 차트</h4>
						</div>
					</div>
					<div class="card-body py-2 text-right" style="max-height: 45px;">
						<input type="date" id="chartSDate" /> ~ <input type="date" id="chartEDate" />
					</div>
					<div class="card-body overflow-auto p-0">
						<table class="table">
							<thead class="sticky-top text-center" style="background-color: whitesmoke;">
								<tr>
									<th style="width: 20%;">진료일</th>
									<th style="width: 15%;">구분</th>
									<th style="width: 45%;">내용</th>
									<th style="width: 20%;">의사</th>
								</tr>
							</thead>
							<tbody id="chartListBody" class="text-center">
							
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>
<script>
let today = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000).toISOString().split('T')[0];
let beforeSevenDays = new Date(today);
beforeSevenDays.setDate(beforeSevenDays.getDate() - 7);
beforeSevenDays = beforeSevenDays.toISOString().split('T')[0];

document.querySelector('#chartEDate').value = today;
document.querySelector('#chartSDate').value = beforeSevenDays;
document.querySelector('#chartEDate').min = beforeSevenDays;
document.querySelector('#chartSDate').max = today;
document.querySelector('#chartEDate').max = today;

// 시작날짜를 변경하면 조건에 맞추어 종료날짜가 변경됨
$('#chartSDate').on('change', function(e){
	const chartSDate = $('#chartSDate');
	const chartEDate = $('#chartEDate');
	
	if(chartSDate.val() > chartEDate.val()){
		chartEDate.val(chartSDate.val());
	}
	chartEDate.attr('min', chartSDate.val());
});

// 환자 검색란에서 엔터 클릭 시 검색 수행
$('#ptSearch').on('keydown', function(e){
	if(e.keyCode == 13){
		document.querySelector('#ptSearchBtn').click();
	}
});

// 환자 검색
function searchPt(){
	
	const keyword = document.querySelector('#ptSearch').value;
	
	fetch('/hospital/checkup/searchPt?keyword=' + keyword)
		.then(res => res.json())
		.then(ptList => {
			
			let code = '';
			
			if(ptList.length == 0){
				code += '<tr>';
				code += '<td colspan="2">일치하는 환자가 존재하지 않습니다.</td>';
				code += '</tr>';
			}else{
				ptList.forEach(function(pt){
					code += '<tr class="ptRow">';
					code += '<td>' + pt.ptNum + '</td>';
					code += '<td>' + pt.ptNm + '</td>';
					code += '</tr>';
				});
			}
			
			document.querySelector('#patientListBody').innerHTML = code;
		});
	
}

// 환자 목록에서 환자를 선택할 경우 해당 환자의 진료 차트 조회
$(document).on('click', '.ptRow', function(e){
	
	const ptNum = $(this).children()[0].textContent;
	listChart(ptNum);
	
});

//진료 차트 조회
function listChart(ptNum){
	
	const chartSDate = document.querySelector('#chartSDate').value;
	const chartEDate = document.querySelector('#chartEDate').value;
	
	const parameterData = {
			ptNum : ptNum,
			chartSDate : chartSDate,
			chartEDate : chartEDate
	}
	
	const parameterString = Object.entries(parameterData).map(e => e.join('=')).join('&');
	
	fetch('/hospital/checkup/listChart?' + parameterString)
		.then(res => res.json())
		.then(chartList => {
			
			let code = '';
			const chartListBody = document.querySelector('#chartListBody');
			
			if(chartList.piList.length == 0 &&
			   chartList.txpList.length == 0 &&
			   chartList.txList.length == 0 &&
			   chartList.txnList.length == 0){
				
				code += '<tr>';
				code += '<td colspan="4">진료기록이 존재하지 않습니다.</td>';
				code += '</tr>';
			}else{
				// 다음 치료 계획 출력
				chartList.txnList.forEach(function(txn){
					code += '<tr class="chartRow" data-chknum="' + txn.chkNum + '" data-sn="' + txn.txnSn + '">';
					code += '<td>' + txn.chkDt + '</td>';
					code += '<td>TX NEXT</td>';
					code += '<td class="text-left">';
					code += txn.txnToothNum.split(', ').map(num => '#<u class="teethNum">' + num + '</u>').join(', ');
					code += '<br />- ' + txn.txcNm;
					if(txn.txnContent != null){
						code += '<hr class="mx-0 my-2" />';
						code += txn.txnContent;
					}
					code += '</td>';
					code += '<td>' + txn.empNm + '</td>';
					code += '</tr>';
				});
				
				// 처치 출력
				chartList.txList.forEach(function(tx){
					code += '<tr class="chartRow" data-chknum="' + tx.chkNum + '" data-sn="' + tx.txSn + '">';
					code += '<td>' + tx.chkDt + '</td>';
					code += '<td>TX</td>';
					code += '<td class="text-left">';
					code += tx.txToothNum.split(', ').map(num => '#<u class="teethNum">' + num + '</u>').join(', ');
					code += '<br />- ' + tx.txcNm;
					if(tx.txContent != null){
						code += '<hr class="mx-0 my-2" />';
						code += tx.txContent;
					}
					code += '</td>';
					code += '<td>' + tx.empNm + '</td>';
					code += '</tr>';
				});
				
				// 치료 계획 출력
				chartList.txpList.forEach(function(txp){
					code += '<tr class="chartRow" data-chknum="' + txp.chkNum + '" data-sn="' + txp.txpSn + '">';
					code += '<td>' + txp.chkDt + '</td>';
					code += '<td>TX PLAN</td>';
					code += '<td class="text-left">';
					code += txp.txpToothNum.split(', ').map(num => '#<u class="teethNum">' + num + '</u>').join(', ');
					code += '<br />- ' + txp.txcNm;
					if(txp.txpContent != null){
						code += '<hr class="mx-0 my-2" />';
						code += txp.txpContent;
					}
					code += '</td>';
					code += '<td>' + txp.empNm + '</td>';
					code += '</tr>';
				});
				
				// 증상 출력
				chartList.piList.forEach(function(pi){
					code += '<tr class="chartRow" data-chknum="' + pi.chkNum + '" data-sn="' + pi.piSn + '">';
					code += '<td>' + pi.chkDt + '</td>';
					code += '<td>PI</td>';
					code += '<td class="text-left">';
					code += pi.piToothNum.split(', ').map(num => '#<u class="teethNum">' + num + '</u>').join(', ');
					code += '<br />- ' + pi.disKorNm;
					if(pi.piContent != null){
						code += '<hr class="mx-0 my-2" />';
						code += pi.piContent;
					}
					code += '</td>';
					code += '<td>' + pi.empNm + '</td>';
					code += '</tr>';
				});
			}
			
			chartListBody.innerHTML = code;
		});
	
}
</script>
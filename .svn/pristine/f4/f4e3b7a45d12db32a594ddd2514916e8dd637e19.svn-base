package com.web.ddentist.ddit.preservation.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.web.ddentist.ddit.preservation.service.IPreservationService;
import com.web.ddentist.vo.EmployeeVO;
import com.web.ddentist.vo.ReservationVO;

@Controller
@RequestMapping("/ddit/resv")
public class PreservationController {
	
	@Autowired
	private IPreservationService presvService;
	
	@GetMapping("/select")
	public String select() {
		return "ddit/reservationSelect";
	}
	
	@GetMapping("/list")
	public String list() {
		return "ddit/reservationAuth";
	}
	
	@PreAuthorize("hasRole('ROLE_PT')")
	@GetMapping("/mOnline")
	public String memberOnline(Model model) {
		List<String> timeList = presvService.selectHiServiceTime();
		model.addAttribute("timeList", timeList);
		return "ddit/reservationForm";
	}
	
	@GetMapping("/nmOnline")
	public String nonMemberOnline(Model model) {
		List<String> timeList = presvService.selectHiServiceTime();
		model.addAttribute("timeList", timeList);
		return "ddit/reservationForm";
	}
	
	@ResponseBody
	@PostMapping("/sendAuthNum")
	public String sendAuthNum(@RequestBody Map<String, String> paramMap, HttpSession session) {
		return presvService.sendAuthNum(paramMap, session);
	}
	
	@ResponseBody
	@PostMapping("/checkAuthNum")
	public String checkAuthNum(@RequestBody Map<String, String> paramMap, HttpSession session) {
		return presvService.checkAuthNum(paramMap, session);
	}
	
	@PostMapping("/listPresv")
	public String listPresv(@RequestParam Map<String, String> paramMap, Model model) {
		List<ReservationVO> presvList = presvService.listPresv(paramMap);
		model.addAttribute("presvList", presvList);
		model.addAttribute("ptNm", paramMap.get("ptNm"));
		return "ddit/reservationList";
	}
	
	@PostMapping("/listNonPresv")
	public String listNonPresv(@RequestParam Map<String, String> paramMap, Model model) {
		List<ReservationVO> nonPresvList = presvService.listNonPresv(paramMap);
		if(nonPresvList.size() == 0) {
			model.addAttribute("msg", "예약 내역이 없습니다.");
			model.addAttribute("loc", "/ddit/resv/list");
			return "ddit/alert";
		}
		model.addAttribute("presvList", nonPresvList);
		model.addAttribute("ptNm", paramMap.get("ptNm"));
		return "ddit/reservationList";
	}
	
	@ResponseBody
	@GetMapping("/selectPresv")
	public ReservationVO selectPresv(@RequestParam String resvNum) {
		return presvService.selectPresv(resvNum);
	}
	
	@ResponseBody
	@PostMapping("/cancelResv")
	public String cancelResv(@RequestBody ReservationVO resvVO) {
		return presvService.cancelResv(resvVO);
	}
	
	@ResponseBody
	@GetMapping("/listDoc")
	public List<EmployeeVO> listDoc(@RequestParam String resvSdt){
		return presvService.listDoc(resvSdt);
	}
	
	@PostMapping("/insertResv")
	public String insertResv(@RequestParam Map<String, String> paramMap) {
		System.out.println(paramMap);
		return "ddit/home";
	}
	
}
